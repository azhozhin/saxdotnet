The XmlConf engine allows you to test a SAX for .NET implementation for
conformance to the XML specification and the SAX specification. The XML
conformance is tested against the public XML testsuite found at
http://www.w3.org/XML/Test (see notes below). The SAX conformance
implementation is based on Elliotte Rusty Harold's SAX Conformance testing
for Java at http://cafeconleche.org/SAXTest/ (see notes below).


Information
===========

  XmlConf.exe Input [/o Output] [/p Pattern] [/a Assembly] [/c Class]
    [/g Path] [/e Expected]
  
 *Input:    The conformance suite driver file. This is an XML file that
            contains a list of test cases and descriptions for each test.
 *Output:   The destination XML file for the results of each test. The result
            file will mirror the conformance suite driver file, but will also
            contain information about whether or not the test passed, failed,
            or was not supported. Any error messages or warnings generated by
            the SAX processor will be included in the output file. If not
            provided the file "results.xml" will be used.
 *Pattern:  A regular expression that is used on each test case ID. If the
            ID matches the regex, then the test is run, otherwise it is
            skipped. For example, if you want to run all of the IBM test
            cases, add: /p "ibm*". If you just want to run weekly-shift_jis
            add: /p "weekly-shift_jis". If not included, all supported test
            cases will be executed.
 *Assembly: The .NET assembly that contains an implementation of IXmlReader
            that will be used for testing conformance (and for parsing the
            conformance suite driver file). If this parameter is not included
            then the default IXmlReader will be used (if one is defined).
 *Class:    Allows you to specify a specific class name for running the tests.
            This is necessary when the assembly contains more than one class
            that implements IXmlReader. By default the conformance suite
            will test the first encountered implementation, this parameter
            allows you to override that behavior. This parameter is ignored
            when using the default assembly (i.e., no /a Assembly parameter
            was supplied).
 *Path:     Generate test case output for SAX conformance to the specified
            path. When supplied, the conformance suite will generate a
            trace file for each event callback. The file will be saved
            in a directory structure that matches the conformance suite
            directory structure. This directory will be located at the
            supplied path.
 *Expected: A directory structure containing a suite of test case trace files
            that exhibit the expected behavior for a SAX processor. This
            parameter is ignored when the [/g Path] option is not supplied,
            otherwise the conformance engine will compare the two sets of
            trace files to test for SAX conformance (See notes on SAX
            conformance below).
            
For example:

  XmlConf.exe "tests\xmlconf\xmlconf.xml" /o aelfredconf.xml
  /a bin/debug/aelfred.dll

  Here we see the conformance suite call for AElfred. For testing we use the
  "tests\xmlconf\xmlconf.xml" driver file. The output is sent to
  aelfredconf.xml. The assembly that contains the IXmlReader implementation
  we want to test is "bin/debug/aelfred.dll".

Using the public XML conformance suite
======================================
To run the conformance application against the XML Conformance Suite you must
first get the most recent version of the XML Conformance Suite from CVS or
download the zip archive at http://www.w3.org/XML/Test. The file
"tests\xmlconf\xmlconf.xml" is the primary driver file for the test suite.
It should be noted that the test suite is constantly under development
and questions about issues in the test suite should be addressed to the
public-xml-testsuite mailing list. When retrieving the test suite from the
public CVS repository, you should be sure to preserve Unix line endings.
By default, most Windows based CVS tools will mangle the line endings
and break certain test case files.


Expected results for SAX conformance
====================================
To run the more complete SAX Conformance tests (which also test XML
Conformance), there are a few more steps. In addition to the XML Conformance
Suite, you need to have a set of generated test files from a known
implementation. Elliotte Harold uses Xerces-J as the reference implementation.

To generate these you must download the package from
http://cafeconleche.org/SAXTest/, compile it, and run it to generated the set
of expected trace files. The suite comes with an ANT file for building and
executing, however if you want to build and run using a batch file instead of
ANT you can use the following commands (to be placed inside the SAXTest folder):

  (The following command should be one line, it is broken for readability)
  javac -classpath lib\junit.jar -classpath lib\xercesImpl.jar -classpath
    lib\xom-1.0a1.jar; -sourcepath src
    src\com\elharo\saxtest\GenerateExpectedViaXerces.java


  (The following command should be one line, it is broken for readability)
  java -classpath lib\junit.jar;lib\xercesImpl.jar;lib\xom-1.0a1.jar;src
    com.elharo.saxtest.GenerateExpectedViaXerces

Once all of the folders and files are collected, you should be able to run the
following:

  XmlConf.exe "tests\xmlconf\xmlconf.xml" /o aelfredconf.xml
    /a bin/debug/aelfred.dll /g tests/AElfred /e tests/expected

  The first three parameters are the same. The fourth /g parameter tells the
  conformance checker to generate the test output and specifies the destination
  folder for the output. The fifth parameter /e specifies the folder that
  contains the expected set of trace files. When the aelredconf.xml file is
  generated, it will now have an additional line for each test indicating
  whether or not it passed conformance (note this generation process can take
  a minute or two depending on your computer's IO speed).

Viewing the results
===================
When the result XML file is produced it will contain an XML processing
instruction at the start of the file that points to xmlconf-results.xsl.
As long as the xmlconf-resuslt.xsl file is in the same folder as the result
XML file, you should be able to open the XML file in any modern browser and
see the result transformed to HTML. Otherwise, to view the HTML you will need
to transform the result file yourself.

The tests will be grouped in various sections. For each test you will see
the basic test information, the description of the test, and any errors
or warnings that were generated by the tested SAX processor. If the test
passed the background will be light green, if it failed it will be light
red. A list of all XML conformance failures appears at the end of the
document.

When SAX conformance testing is included, each test will contain an
additional row of information about "Conformance". SAX Conformance
failures are separate from XML conformance failures. It is possible (and
even likely) to pass an XML conformance test, but fail the corresponding
SAX conformance test. Additionally, each SAX conformance test produces a
diagnostic HTML file, which is linked in the results document.

The SAX conformance Diagnostic lists the test case description, the reason
that for conformance failure in red (if the test failed) followed by the
actual test case file, the expected test case trace file and the actual
test case trace file produced by the tested processor.

Modifying the stylesheet (tips and tricks)
==========================================
The xmlconf-results.xsl stylesheet contains two parameters that can change
the resulting document dramatically:

  <xsl:param name="showOnlyFail" select="false()"/>
  <xsl:param name="showUri" select="false()"/>

If set to "true()", The showOnlyFail parameter will only list test cases
that failed XML conformance, SAX conformance, or both. This is very useful
when working on the those last few errors, as it is very tedious to weed
through all of the passed test cases.

If set to "true()" the showUri parameter will output the test case's full URI
before each test case. The allows you to easily grab a link to a specific
test case for debugging.

In addition to these two parameters it should be noted that generating the
result XML file can be very slow. When working on specific test cases,
use the /p parameter to supply a test case pattern. This will greatly reduce
the amount of time spent debugging specific cases.

Known issues and discrepancies
==============================
At the time of this writing, it is possible to build a non-validating SAX
processor for .NET that has no XML conformance errors. However, it should be
noted that a number of changes and corrections to the public XML test suite
are pending/outstanding. When testing, it is recommended that you use the
Zip archive releases from the Public XML test suite website.

The only major discrepancies in XML testing include:

  Non-validating processors do not attempt to process tests requiring
  validity, these tests are skipped. Additionally, section 3.2 Invalid XML
  Documents states "All conforming XML 1.0 Non-validating Processors should
  accept these documents, reporting no errors." Non-validating processors
  that raise errors (not fatal errors) for these documents are treated as
  partially validating processors and are considered conformant.
  
  Optional errors in section 3.4 are not tallied in the conformance totals.
  Strict examination of each test must be performed to verify conformance.
  For example, processors which do not support a specific encoding must
  raise a fatal error, not an exception.

  Some test case are not labelled correctly in the driver files of the
  XML test suite:
  - rmt-e2e-18: Fails because the script does not set the ExternalGeneral feature.
    The error is in errata2e.xml, the ENTITIES attribute of the TEST element
    should have the value "both" instead of "parameter".
  - rmt-e2e-36: Fails because the script does not set the ExternalParameter feature.
    The error is in errata2e.xml, the ENTITIES attribute of the TEST element
    is missing - it should be present with the value "parameter".
  - rmt-e2e-60: Same problem as with rmt-e2e-36, missing ENTITIES="parameter"
    attribute.

Because SAX conformance is a relatively new effort, there are still issues
in testing various SAX processors for equality. Test failures should be
carefully examined to ensure that the failure is significant. Typical
discrepancies include:

  Reported SYSTEM ID differs. The SAX for .NET SAX conformance attempts to
  reify the various SYSTEM identifiers so that they can be compared. This
  may not be successful in all cases.
  
  endDocument and fatalError elements appear in the wrong order. Within SAX
  for .NET the endDocument event must be the final reported event and must
  always occur after any fatalError event.

  resolveEntity calls may contain a baseUri. If a baseUri is provided the
  conformance engine attempts to absolutize the URI using the supplied
  baseUri. This discrepancy exists because SAX for .NET no longer supports
  the original resolveEntity signature in favor of the newer resolveEntity
  signature found in the Java interface IEntityResolver2.
  
  skippedEntity may be reported. When an undeclared entity is encountered,
  where this is not a violation of well-formedness, a non-validating processor
  will notify the application that the entity was skipped instead of producing
  a fatalError.
  
  Additional characters may be reported prior to a fatalError event in
  the case of invalid character data. This often happens when a CDend (']]>')
  is contained in content.
  
  Not all encodings supported. If a processor does not support a specific
  encoding it must report a fatalError. The reference implementation
  currently supports all encodings in the XML test suite.
  
  At the time of this writing, Xerces-J is known to have several conformance
  errors.
  
  valid-sa-012 - xmlconf/xmltest/valid/sa/012.xml,
    Xerces incorrectly raises an error when parsing (doesn't
    handle NAMESPACES="no")

  o-p04pass1 - xmlconf/oasis/p04pass1.xml,
    Xerces incorrectly raises an error when parsing (doesn't
    handle NAMESPACES="no")

  o-p05pass1 - xmlconf/oasis/p05pass1.xml,
    Xerces incorrectly raises an error when parsing (doesn't
    handle NAMESPACES="no")

  ibm-not-wf-P01-ibm01n01.xml - xmlconf/ibm/not-wf/P01/ibm01n01.xml,
    the <endDocument> element should come after the <fatalError> element

  o-p02fail30 - xmlconf/oasis/p02fail30.xml,
    the output document could reasonably have a <startElement> callback
      <?xml version="1.0" encoding="utf-8"?>
      <ConformanceResults>
          <startDocument />
          <startElement>
              <namespaceURI />
              <localName>doc</localName>
              <qualifiedName>doc</qualifiedName>
              <attributes />
          </startElement>
          <fatalError />
          <endDocument />
      </ConformanceResults>

  not-wf-sa-026 -
    It is possible for a processor to report a <char>]</char>
    before the fatalError. This seems logical for "]]]>"

  not-wf-sa-029 -
    It is possible for a processor to report
    <char>a</char>
    <char>b</char>
    <char>c</char>
    <char>]</char>
    before the fatalError. This seems logical for "abc]]]>def"

